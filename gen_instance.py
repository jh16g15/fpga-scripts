#!/usr/bin/env python3

#
# Joseph Hindmarsh November 2021
#
# Generates a folder of VHDL instantiation templates when fed a source directory (I would suggest adding
#  **/instantiation_template/*.vho to your .gitignore, to avoid repo pollution)
#
# Usage: python3 gen_instance.py path/to/src/dir
#
#   After running the script,


import os
import sys
import argparse
import pathlib


def parse_vhdl_file(filename):
    print("Found " + filename)
    found_entity = False
    in_entity = False
    in_generics = False
    in_ports = False
    generic_list = []
    port_list = []
    template = []
    entity_name = ""
    with open(filename) as f:

        for line in f.readlines():
            line = filter_vhdl_comment(line)
            # Wait until we find an entity declaration
            if "entity" in line.lower() and (not in_generics) and (not in_ports):
                if found_entity == True:
                    print("ERROR: found multiple entites in " + filename)
                else:
                    found_entity = True
                    in_entity = True
                    template_filename = get_template_name(filename)
                    entity_name = get_entity_name(line)
                    print("Creating template " + template_filename +
                          " for entity " + entity_name)

            # There are several ways to end our entity declaration
            #
            # 1. end;
            # 2. end entity;
            # 3. end $NAME;
            # 4. end ;
            ##
            first_word = get_first_word(line.lower())

            if ("end" == first_word or "end;" == first_word) and in_entity:
                in_generics = False
                in_ports = False
                in_entity = False
                break

            # TODO: handle generic/port region start on the same line as a generic/port declatarion
            if in_entity:
                if "generic" in line.lower() and (not in_generics) and (not in_ports):
                    # move into finding the Generics
                    in_generics = True
                    in_ports = False
                    continue    # nothing more to do with this line
                if "port" in line.lower() and (not in_ports):
                    # move into finding the Ports
                    in_generics = False
                    in_ports = True
                    continue    # nothing more to do with this line

                if in_generics and not in_ports:
                    name = get_generic_port_name(line)
                    if len(name) != 0:  # ignore empty strings
                        print("Found Generic: " + name)
                        generic_list.append(name)

                if in_ports and not in_generics:
                    name = get_generic_port_name(line)
                    if len(name) != 0:  # ignore empty strings
                        print("Found Port: " + name)
                        port_list.append(name)

    # after we have finished parsing the file
    template = gen_template(
        src_name=filename, entity_name=entity_name, generics=generic_list, ports=port_list)
    save_list_to_file(template, get_template_name(filename))


def get_generic_port_name(line):
    # print("old: " + line)

    # grab everything before the ':' so we don't get the
    line = line.split(":")[0]
    line = line.split(")")[0]  # now we only have the port name, ");" or ")"

    line = line.strip()  # remove leading/trailing whitespace
    # print("new: " + line)
    return line


def get_entity_name(line):
    line = line.split(" ")
    i = 0
    for word in line:
        if word == "entity":
            return line[i + 1]
        i = i + 1
    return "UNKNOWN_ENTITY"


def gen_template(src_name, entity_name, generics, ports, library="work"):
    instance_name = "u_" + entity_name

    template = []
    template.append(
        "-- Autogenerated Instantiation Template for " + str(entity_name) + "\n")
    template.append(
        "-- Generated by gen_instance.py (available at https://github.com/jh16g15/fpga-scripts)" + "\n")
    template.append("-- Original Source File: " +
                    str(os.getcwd()) + "/" + src_name + "\n")
    template.append("" + "\n")
    template.append(instance_name + " : entity " +
                    library + "." + entity_name + "\n")

    # template.append(" -- Generics Found: " + str(generics) + "\n")
    # template.append(" -- Ports Found: " + str(ports) + "\n")

    num_generics = len(generics)
    if num_generics != 0:
        template.append("    Generic map (" + "\n")
        for i, generic in enumerate(generics):
            if i == num_generics - 1:  # final generic has no comma
                template.append("        " + generic + " => " + generic + "\n")
            else:
                template.append("        " + generic +
                                " => " + generic + "," + "\n")

        template.append(")" + "\n")

    num_ports = len(ports)
    if num_ports != 0:
        template.append("    Port map (" + "\n")

        for i, port in enumerate(ports):
            if i == num_ports - 1:  # final port has no comma
                template.append("        " + port + " => " + port + "\n")
            else:
                template.append("        " + port + " => " + port + "," + "\n")

        template.append(");" + "\n")

    template.append("" + "\n")
    return template


def save_list_to_file(items, filename):
    with open(filename, "w") as f_out:
        f_out.writelines(items)


def get_template_name(src_name):
    base_name = src_name.split(".vhd")
    return "instantiation_templates/" + base_name[0] + "_template.vho"


def filter_vhdl_comment(line):
    # print("input line: " + line)
    line = line.split("--", 1)
    # print("output line: " + line[0])
    return line[0]


def get_first_word(line):
    line = line.split(" ")
    return line[0].strip()  # remove newlines on the end
# def try_funcs():

#     get_generic_port_name(" ); ")

#     # parse_vhdl_file("/home/joehi/fpga-scripts/example_src/cpu_regs.vhd")

#     # tmp_list = []
#     # print(str(tmp_list))
#     # tmp_list.append(None)
#     # print(str(tmp_list))

#     # input("Continue:")


def main(args):

    # try_funcs()

    print(str(args))
    parser = argparse.ArgumentParser(
        description='generate VHDL Instantiation Templates from a folder of source files')
    # nargs = ? means could be 0 or 1 arg provided
    parser.add_argument(
        'dir', nargs='?', default=os.getcwd(), type=pathlib.Path)
    # 'dir', nargs='?', default="/home/joehi/fpga-scripts/example_src", type=pathlib.Path)      # for the VSCode debugger

    args = parser.parse_args()

    src_dir = args.dir

    print("Current Working Dir: " + os.getcwd())
    print("Generating Instantiation Templates for " + str(src_dir))
    os.chdir(src_dir)
    print("Updated Working Dir: " + os.getcwd())

    # TODO: Add a "clean function to delete the old folder and its contents"
    # make new folder in $WD
    os.makedirs("instantiation_templates", exist_ok=True)

    src_dir = pathlib.Path.resolve(src_dir)
    print("src dir = " + str(src_dir))
    dest_dir = pathlib.Path.joinpath(src_dir, "instantiation_templates")
    print("dest dir = " + str(dest_dir))
    #

    for filename in os.listdir():  # uses current working directory (src_dir)
        if filename.endswith(".vhd"):
            parse_vhdl_file(filename)
        else:
            print("INFO: Skipped " + str(filename) + " as not a VHDL file")


if __name__ == "__main__":
    sys.exit(main(sys.argv))    # pass the args
